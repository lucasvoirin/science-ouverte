---
title: "Git et Github"
author: "Lucas"
date: "2025-02-12"
date-modified: "2025-02-21"
description: ""
categories: [Informatique, Linux, Windows, üí°üí°]
---

Si tu es ici, c'est que tu sais d√©j√† √† quoi sert Git et que tu souhaites commencer √† l'utiliser ! Et c'est une tr√®s bonne id√©e ! 

### Premi√®re √©tape : installer Git

La premi√®re chose √† faire, c'est d'installe Git. La fa√ßon de le faire est diff√©rente en fonction du syst√®me d'exploitation mais il n'y a rien de compliqu√©, c'est juste un logiciel comme un autre.

::: {.panel-tabset}

### Windows

Il existe une version de Git pour Windows qui est disponible depuis la [page de t√©l√©chargement officielle](https://git-scm.com/downloads/win).

Il suffit de t√©l√©charger puis ouvrir l'ex√©cutable qui correspond √† votre syst√®me (en g√©n√©ral le 64-bit).

Laissez les options par d√©faut, √ßa sera tr√®s bien pour commencer ! 

### Linux

Le gestionnaire de paquets de votre distribution fera l'affaire !

Sur Debian on peut le faire avec `apt` :

```bash
apt install git

```

Sur les autres distributions il faudra juste utiliser le gestionnaire par d√©faut (`dnf`, `pacman`... ).

:::


### Deuxi√®me √©tape : entrer dans le terminal

Eh oui, git est un logiciel dit "en ligne de commande" ! √áa veut dire que pour l'utiliser il faut √©crire des lignes de code dans un terminal.

![](./hackerman.png){fig-align="center"}

Mais avant de paniquer, voici quelques infos qui vont vous rassurer :

1. si on a peur d'oublier comment fonctionne le logiciel, on peut √©crire les commandes utiles dans un carnet ou sur un ficher de l'ordinateur;
2. en vrai, il y a pas tant de commandes que √ßa donc c'est tr√®s facile de s'en rappeler;
3. quand on cherche de l'aide, c'est super facile de trouver sur internet (ou ChatGPT) des commandes qui fonctionnent;
4. utiliser le terminal, √ßa donne l'impression d'√™tre vraiment pro (m√™me quand c'est pas le cas) et √ßa c'est cool !

### Troisi√®me √©tape : configurer Git

On va ajouter quelques configurations au fichier ~/.gitconfig

- `git config --global user.email "arsene.lupin@monemail.com"`

- `git config --global user.name "gentlemancambrioleur"`

- `git config --global init.defaultBranch main`

- `git config --global core.editor "nvim -u NONE"`

### Quatri√®me √©tape : le d√©p√¥t distant

#### Qu√©ss√© √ßa un d√©p√¥t distant ?!

Je suis s√ªr que tu as d√©j√† crois√© [Github](https://github.com). Il s'agit d'un service de stockage en ligne, un peu comme Google Drvie. Mais contrairement au service Drive de Google, GitHub permet essentiellement de stocker (mais pas que !) du code.

L'avantage avec GitHub, c'est que l'on peut communiquer avec directement depuis Git. Et √ßa c'est vraiment tr√®s pratique !

Mais avant que Git (sur ton ordinateur) et GitHub (sur internet) puissent communiquer, il faut quelques √©tapes.

#### Cr√©er un compte

Rien de plus simple, c'est juste un service en ligne comme un autre. Alors tu peux aller sur [github.com](https://github.com) et cr√©er un compte !

::: callout-tip
Choisis bien ton nom d'utilisateur, sur GitHub, c'est ce nom qui va se retrouver dans l'url permettant d'acc√®der √† ta page perso. Donc si tu rends ton code publique un jour, ce nom sera celui qui sera affich√©.
:::


Une fois que tu as ton compte on va pouvoir le faire communiquer avec Git. Pour cela, la solution la plus simple est SSH.

#### SSH

Alors l√† on s'attaque aux choses s√©rieuses ! C'est probable que tu ne saches pas ce qu'est SSH alors voici le principe :

Pour communiquer, ton ordinateur (avec Git dessus) et le serveur de GitHub doivent √©tablir une connexion s√©curis√©e. Cette connexion emp√®che les personnes malveillantes de voir ou modifier au passage ce que tu √©changes avec GitHub. SSH est un logiciel permettant de s√©curiser ce type de communication. Pour cela, on utilise deux fichiers, que l'on appelle des cl√©s.

::: callout-tip
Pour √©tablir une communicatin s√©curis√©e entre un ordinateur et un serveur, SSH utilise une cl√© dite priv√©e et une cl√© dite publique. La cl√© priv√©e doit rester sur l'ordinateur et ne surtout pas √™tre partag√©e. La cl√© publique doit quant √† elle √™tre donn√©e au serveur. Une fois la cl√© priv√©e, bien en s√©curit√© sur l'ordinateur et la cl√© publique donn√©e √† GitHub, la communication peut se faire de mani√®re s√©curis√©e.
:::


::: {.panel-tabset}

### Windows

```
C:\Users\<nom_utilisateur>\.ssh
```

### Linux

```
/home/<nom_utilisateur>/.ssh
```

:::

Pour g√©n√©rer un jeu de cl√©s SSH (un cl√© priv√©e et une cl√© publique), il suffit de lancer la commande suivante :

```bash
ssh-keygen -t ed25519
```

On nous demande de sp√©cifier un nom de fichier pour stocker ces cl√©s. Comme les cl√©s seront utilis√©es pour communiquer avec le compte GitHub d'Ars√®ne, on va mettre `github_arsene_lupin`.

Une fois le nom du fichier entr√©, on nous demande un mot de passe. C'est une s√©curit√© permettant de prot√©ger l'acc√®s √† la cl√© priv√©e. Si l'on ne souhaite pas mettre de mot de passe, il suffit d'appuyer sur `Entr√©e`.

Une fois toutes les √©tapes compl√©t√©es, SSH a cr√©√© deux fichiers :

- la cla priv√©e : `github_arsene_lupin`

- et la cl√© publique : `github_arsene_lupin.pub`.

Tu peux ouvrir le fichier contenant la cl√© publique, √† l'int√©rieur il doit y avoir quelque chose qui ressemble √† √ßa :

```
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICoyAUJwwKgKMrFgORyqSdEPqjYMYXwnDCDO59GCmYlV
```

Pas d'inqui√®tude, ce n'est pas pr√©vu pour √™tre lu par des humains !

Il ne nous reste maintenant qu'une seule √©tape : donner la cl√© publique √† GitHub !

Depuis ta page de profil GitHub, clique sur ton image de profile en haut √† droite pour ouvrir le menu. Dans ce menu, clique sur `Settings`.

Une fois dans le menu de configuration, clique sur `SSH and GPG keys`.

Enfin, clique sur le bouton vert `New SSH key`.

Tu peux alors entrer le titre de la cl√© dans la case `Title` (ce que tu mets n'as pas vraiment d'importance, c'est juste pour te souvenir de quel ordinateur est li√© √† cette cl√©) et copier la cl√© publique dans la case `Key`.

Cliques enfin sur `Add SSH key` et voil√†, c'est fini !


::: callout-note
# R√©f√©rences

Git poss√®de une [documentation](https://git-scm.com/book/fr/v2) tr√®s compl√®te et, chose rare, en Fran√ßais !! Il est certain que la r√©ponse √† beaucoup de questions s'y trouve.

Sinon, en anglais mais tr√®s vulgaris√© voici quelques r√©f√©rences int√©ressantes :

- [Happy Git With R](https://happygitwithr.com/) pour apprendre √† configurer Git pour RStudio.
- [Software Carpentry](https://swcarpentry.github.io/git-novice/index.html) est un tutoriel complet et ludique pour prendre en main Git.


:::
